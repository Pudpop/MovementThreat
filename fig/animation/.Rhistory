#lapply(FUN = get_time) %>%
#Reduce(f=function(x,y) x+0.9*y)
#Reduce(f='+')
#discounted_sum(gamma = 0.99)
#mat <- (mat+1)/2
return(list(players = mat,ball = get_time(2,ballDo = T)))
}
}
for (i in 69:69){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
temp$ball %>% t %>% raster %>% image
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 69:73){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
#calculate pitch control/dominant regions return sf object
calculate_pitch_control <- function(frame,model,nproc = 8,this.times = times){
ball = frame %>% subset(player == 1)
frame <- frame %>% subset(player!=1)
if (isTRUE(all.equal(model,fujsug)) | isTRUE(all.equal(model,taki)) | length(model)>1){
cl <- makeCluster(nproc)
registerDoParallel(cl)
partialRR <- foreach(i = 1:length(this.times),
.combine="c",
.packages = c('MASS','dplyr','sf','igraph'),
.export = ls(globalenv())) %dopar% partial(this.times[i],frame,model)
stopCluster(cl)
cl <- makeCluster(nproc)
registerDoParallel(cl)
combined <- foreach(i = 1:22,
.combine="rbind",
.packages = c("dplyr","sf"),
.export = ls(globalenv())) %dopar% form_syn(i,partialRR)
stopCluster(cl)
return(combined)
}
else if (model == "voronoi"){
#plot voronoi tessselation
st_voronoi_point <- function(points){
## points must be POINT geometry
if(!all(st_geometry_type(points) == "POINT")){
stop("Input not  POINT geometries")
}
g = st_combine(st_geometry(points)) # make multipoint
v = st_voronoi(g)
v = st_collection_extract(v)
return(v[unlist(st_intersects(points, v))])
}
box <- c(xmin = 0, xmax = 107, ymax = 0, ymin = 70) %>%
st_bbox() %>%
st_as_sfc()
voronoi <- one_frame[c('player','team','x','y')] %>%
st_as_sf(coords= c( "x", "y" )) %>%
st_voronoi_point() %>%
st_intersection(box)
voronoi <- st_sf(player = one_frame$player,
team = one_frame$team,
geometry = voronoi)
return(voronoi)
}
else if (model == "ppc"){
cut_xy <- function(x,is.x=TRUE){
if(is.x){
return( floor((x %>% as.numeric)/x_bin_width))
}
return(floor((x %>% as.numeric)/y_bin_width))
}
ball_pos <- c((ball$x %>% cut_xy)+1,(ball$y %>% cut_xy(is.x=FALSE))+1)
get_time <- function(time,ballDo = F){
path <- "C:/Users/David/OneDrive/Documents/Work/Thesis/github/data/positional"
if (ballDo){
path <- "C:/Users/David/OneDrive/Documents/Work/Thesis/github/data/ball"
}
temp <- h5read(paste0(path,"/time",".hdf5"),
paste0("time_",time))
get_position <- function(row){
if (row[4] == 'r'){
orig <- row[3] %>% as.integer
orig.x <- floor(orig/y_segmentation)
orig.x <- x_segmentation - orig.x
orig.y <- orig%%y_segmentation
orig.y <- y_segmentation - orig.y
orig <- (orig.x-1)*y_segmentation + orig.y
mattt <- (temp[,orig %>% as.integer,
row[2]  %>% as.integer,
row[1]  %>% as.integer]) %>%
matrix(nrow=x_segmentation,byrow=T)
mattt <- mattt[,c(ncol(mattt):1)]
mattt <- mattt[c(nrow(mattt):1),]
summatt <- sum(mattt)
if (summatt >0){
return(mattt/(summatt))
}
return(matrix(0,nrow=x_segmentation,ncol=y_segmentation))
}
mattt <- temp[,(row[3]%>% trimws %>% as.integer+1),
row[2]  %>% as.integer,
row[1]  %>% as.integer]%>%
matrix(nrow=x_segmentation,byrow=T)
summatt <- sum(mattt)
if (summatt >0){
return(mattt/(summatt))
}
return(matrix(0,nrow=x_segmentation,ncol=y_segmentation))
}
if (ballDo){
mats <- get_position(c(ball$speedGroup,ball$angleGroup,(ball_pos[1]-1)*y_segmentation + ball_pos[2]-1,"b"))
h5closeAll()
return(mats)
}
else{
mats <- (frame$x %>% cut_xy) * y_segmentation + frame$y %>% cut_xy(is.x=F)
mats <- data.frame(speedGroup = frame$speedGroup %>% as.integer,
angleGroup = frame$angleGroup %>% as.integer,
position = mats %>% as.integer,
team = frame$team) %>%
apply(FUN = get_position,MARGIN=1)
h5closeAll()
return(mats)
}
#Reduce('+',plyr::alply(.data = data.frame(speedGroup = frame$speedGroup %>% as.integer,
#                                          angleGroup = frame$angleGroup %>% as.integer,
#                                          position = mats %>% as.integer,
#                                          team = frame$team),
#                    .fun = get_position,
#                    .margins=1)[1:22]) %>%
}
discounted_sum <- function(mats,gamma){
s = mats[[1]]/7
#browser()
for (i in 1:length(mats)){
s = s + (gamma^i)*mats[[i]]/7
}
return(s)
}
dist_mat <- function(row,ball){
d = dist(matrix(c(row[1:2],ball),byrow=T,nrow=2),method="manhattan")
if (d == 0){
return(1)
}
if (d != dist(matrix(c(row[1:2],ball),byrow=T,nrow=2))){
x_dist <- abs(row[1]-ball[1])
y_dist <- abs(row[2]-ball[2])
return(min(ceiling(max(c(x_dist,y_dist))),7))
}
return(min(ceiling(d),7))
}
get_cell_influence <- function(coords,mm){
time <- coords[3] %>% as.integer
x <- coords[1] %>% as.integer
y <- coords[2] %>% as.integer
mm <- mm[[time]]
l_inf <- rep(0,11)
r_inf <- rep(0,11)
for (i in 1:22){
team <- frame$team[i]
player <- (frame$player[i]-2)%%11+1
temp <- mm[,i] %>% matrix(nrow=x_segmentation,ncol=y_segmentation)
max_prob <- max(temp)
temp <- temp/max_prob
if (team == "l"){
l_inf[player %>% as.integer] <- temp[x,y]
}
else{
r_inf[player %>% as.integer] <- temp[x,y]
}
}
return(1/(1+exp(sum(r_inf)-sum(l_inf))))
}
get_ball_probs <- function(coords,mm){
time <- coords[3] %>% as.integer
x <- coords[1] %>% as.integer
y <- coords[2] %>% as.integer
return(mm[[time]][x,y])
}
#mat <- get_time(0)
mats <- c(0,1,2,3,4,5,6) %>%
lapply(FUN=get_time)
mat <- matrix(0,nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = dist_mat,MARGIN=1,ball = ball_pos) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = get_cell_influence,MARGIN=1,mm = mats) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation)
#mats <- c(0,1,2,3,4,5,6) %>%
#          lapply(FUN = get_time,ballDo=TRUE)
#bal <- matrix(0,nrow=x_segmentation,ncol=y_segmentation) %>%
#          melt %>%
#          apply(FUN = dist_mat,MARGIN=1,ball = ball_pos) %>%
#          matrix(nrow=x_segmentation,ncol=y_segmentation) %>%
#          melt %>%
#          apply(FUN = get_ball_probs,MARGIN=1,mm = mats) %>%
#          matrix(nrow=x_segmentation,ncol=y_segmentation)
#mat <- c(0,1,2,3,4,5,6) %>%
#lapply(FUN = time_mat) %>%
#lapply(FUN = get_time) %>%
#Reduce(f=function(x,y) x+0.9*y)
#Reduce(f='+')
#discounted_sum(gamma = 0.99)
#mat <- (mat+1)/2
return(list(players = mat,ball = get_time(1,ballDo = T)))
}
}
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 69:73){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
plot_threat <- function(poss,pc,threat,frame,team){
if (team == "r"){
threat <- threat[,c(ncol(threat):1)]
threat <- threat[c(nrow(threat):1),]
}
else{
pc <- 1-pc
}
pc[pc < 0.5] = 0
th <- (poss)*pc*threat
ds <- sum(th)
d <- data.frame(s=ds)
return(soccerPitch() +
scale_color_manual(values=c(pal[5],pal[2],pal[4]))+
labs(x="",y="")+
geom_point(data = frame,
mapping=aes(x=x,y=y,color=as.factor(team)),
position = 'jitter',
show.legend = F)+
geom_segment(data = frame,
mapping=aes(x=x,xend = x+vX*scale,yend=y+vY*scale,y=y,color=as.factor(team)),
arrow = arrow(length = unit(0.1, "cm")),
show.legend = F)+
geom_text(data = frame,
mapping=aes(x=x,y=y,label = action),
show.legend = F)+
coord_fixed()+
labs(x="",y="")+
scale_fill_gradientn(colours=c(pal[2],"white",pal[4]),
values = c(0,0.5,1),
limits = c(0,1))+
geom_raster(data = pc %>% reshape2::melt(),
mapping = aes((Var1-0.5)*x_bin_width,(Var2-0.5)*y_bin_width,fill=value),
alpha=0.5,interpolate=TRUE,show.legend = F)+
geom_segment(data = d,
mapping=aes(x = 117,xend=117,y = 10,yend = 10+(s*50)))+
geom_point(data = d,
mapping=aes(x = 117,y = 10+(s*50)),
size=1.5)+
geom_text(data = d,
mapping=aes(x = 122,y = 10+(s*50),label =round(ds,2)),
size=3)+
geom_text(data = d,
mapping=aes(x = 118,y = 65,label = "Threat"),
size=4))
}
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 69:73){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
#calculate pitch control/dominant regions return sf object
calculate_pitch_control <- function(frame,model,nproc = 8,this.times = times){
ball = frame %>% subset(player == 1)
frame <- frame %>% subset(player!=1)
if (isTRUE(all.equal(model,fujsug)) | isTRUE(all.equal(model,taki)) | length(model)>1){
cl <- makeCluster(nproc)
registerDoParallel(cl)
partialRR <- foreach(i = 1:length(this.times),
.combine="c",
.packages = c('MASS','dplyr','sf','igraph'),
.export = ls(globalenv())) %dopar% partial(this.times[i],frame,model)
stopCluster(cl)
cl <- makeCluster(nproc)
registerDoParallel(cl)
combined <- foreach(i = 1:22,
.combine="rbind",
.packages = c("dplyr","sf"),
.export = ls(globalenv())) %dopar% form_syn(i,partialRR)
stopCluster(cl)
return(combined)
}
else if (model == "voronoi"){
#plot voronoi tessselation
st_voronoi_point <- function(points){
## points must be POINT geometry
if(!all(st_geometry_type(points) == "POINT")){
stop("Input not  POINT geometries")
}
g = st_combine(st_geometry(points)) # make multipoint
v = st_voronoi(g)
v = st_collection_extract(v)
return(v[unlist(st_intersects(points, v))])
}
box <- c(xmin = 0, xmax = 107, ymax = 0, ymin = 70) %>%
st_bbox() %>%
st_as_sfc()
voronoi <- one_frame[c('player','team','x','y')] %>%
st_as_sf(coords= c( "x", "y" )) %>%
st_voronoi_point() %>%
st_intersection(box)
voronoi <- st_sf(player = one_frame$player,
team = one_frame$team,
geometry = voronoi)
return(voronoi)
}
else if (model == "ppc"){
cut_xy <- function(x,is.x=TRUE){
if(is.x){
return( floor((x %>% as.numeric)/x_bin_width))
}
return(floor((x %>% as.numeric)/y_bin_width))
}
ball_pos <- c((ball$x %>% cut_xy)+1,(ball$y %>% cut_xy(is.x=FALSE))+1)
get_time <- function(time,ballDo = F){
path <- "C:/Users/David/OneDrive/Documents/Work/Thesis/github/data/positional"
if (ballDo){
path <- "C:/Users/David/OneDrive/Documents/Work/Thesis/github/data/ball"
}
temp <- h5read(paste0(path,"/time",".hdf5"),
paste0("time_",time))
get_position <- function(row){
if (row[4] == 'r'){
orig <- row[3] %>% as.integer
orig.x <- floor(orig/y_segmentation)
orig.x <- x_segmentation - orig.x
orig.y <- orig%%y_segmentation
orig.y <- y_segmentation - orig.y
orig <- (orig.x-1)*y_segmentation + orig.y
mattt <- (temp[,orig %>% as.integer,
row[2]  %>% as.integer,
row[1]  %>% as.integer]) %>%
matrix(nrow=x_segmentation,byrow=T)
mattt <- mattt[,c(ncol(mattt):1)]
mattt <- mattt[c(nrow(mattt):1),]
summatt <- sum(mattt)
if (summatt >0){
return(mattt/(summatt))
}
return(matrix(0,nrow=x_segmentation,ncol=y_segmentation))
}
mattt <- temp[,(row[3]%>% trimws %>% as.integer+1),
row[2]  %>% as.integer,
row[1]  %>% as.integer]%>%
matrix(nrow=x_segmentation,byrow=T)
summatt <- sum(mattt)
if (summatt >0){
return(mattt/(summatt))
}
return(matrix(0,nrow=x_segmentation,ncol=y_segmentation))
}
if (ballDo){
mats <- get_position(c(ball$speedGroup,ball$angleGroup,(ball_pos[1]-1)*y_segmentation + ball_pos[2]-1,"b"))
h5closeAll()
return(mats)
}
else{
mats <- (frame$x %>% cut_xy) * y_segmentation + frame$y %>% cut_xy(is.x=F)
mats <- data.frame(speedGroup = frame$speedGroup %>% as.integer,
angleGroup = frame$angleGroup %>% as.integer,
position = mats %>% as.integer,
team = frame$team) %>%
apply(FUN = get_position,MARGIN=1)
h5closeAll()
return(mats)
}
#Reduce('+',plyr::alply(.data = data.frame(speedGroup = frame$speedGroup %>% as.integer,
#                                          angleGroup = frame$angleGroup %>% as.integer,
#                                          position = mats %>% as.integer,
#                                          team = frame$team),
#                    .fun = get_position,
#                    .margins=1)[1:22]) %>%
}
discounted_sum <- function(mats,gamma){
s = mats[[1]]/7
#browser()
for (i in 1:length(mats)){
s = s + (gamma^i)*mats[[i]]/7
}
return(s)
}
dist_mat <- function(row,ball){
d = dist(matrix(c(row[1:2],ball),byrow=T,nrow=2),method="manhattan")
if (d == 0){
return(1)
}
if (d != dist(matrix(c(row[1:2],ball),byrow=T,nrow=2))){
x_dist <- abs(row[1]-ball[1])
y_dist <- abs(row[2]-ball[2])
return(min(ceiling(max(c(x_dist,y_dist))),7))
}
return(min(ceiling(d),7))
}
get_cell_influence <- function(coords,mm){
time <- coords[3] %>% as.integer
x <- coords[1] %>% as.integer
y <- coords[2] %>% as.integer
mm <- mm[[time]]
l_inf <- rep(0,11)
r_inf <- rep(0,11)
for (i in 1:22){
team <- frame$team[i]
player <- (frame$player[i]-2)%%11+1
temp <- mm[,i] %>% matrix(nrow=x_segmentation,ncol=y_segmentation)
max_prob <- max(temp)
temp <- temp/max_prob
if (team == "l"){
l_inf[player %>% as.integer] <- temp[x,y]
}
else{
r_inf[player %>% as.integer] <- temp[x,y]
}
}
return(1/(1+exp(sum(r_inf)-sum(l_inf))))
}
get_ball_probs <- function(coords,mm){
time <- coords[3] %>% as.integer
x <- coords[1] %>% as.integer
y <- coords[2] %>% as.integer
return(mm[[time]][x,y])
}
#mat <- get_time(0)
mats <- c(0,1,2,3,4,5,6) %>%
lapply(FUN=get_time)
mat <- matrix(0,nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = dist_mat,MARGIN=1,ball = ball_pos) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = get_cell_influence,MARGIN=1,mm = mats) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation)
mats <- c(0,1,2,3,4,5,6) %>%
lapply(FUN = get_time,ballDo=TRUE)
bal <- matrix(0,nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = dist_mat,MARGIN=1,ball = ball_pos) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation) %>%
melt %>%
apply(FUN = get_ball_probs,MARGIN=1,mm = mats) %>%
matrix(nrow=x_segmentation,ncol=y_segmentation)
#mat <- c(0,1,2,3,4,5,6) %>%
#lapply(FUN = time_mat) %>%
#lapply(FUN = get_time) %>%
#Reduce(f=function(x,y) x+0.9*y)
#Reduce(f='+')
#discounted_sum(gamma = 0.99)
#mat <- (mat+1)/2get_time(1,ballDo = T)
return(list(players = mat,ball = bal))
}
}
for (i in 69:73){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 1:nrow(frames_for_ani)){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 1:nrow(frames_for_ani)){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
setwd("C:/Users/David/OneDrive/Documents/Work/Thesis/github/fig/animation")
for (i in 1:nrow(frames_for_ani)){
print(frames_for_ani[i,])
frameNo <- frames_for_ani[i,1]
team <- frames_for_ani[i,2]
one_frame = subset(match,frame == frameNo)
temp <- calculate_pitch_control(one_frame ,"ppc")
pl <- plot_threat(temp$ball,temp$players,xT,one_frame,team)
ggsave(paste0("frame_",frameNo,".png"),pl)
}
View(frames_for_ani)
